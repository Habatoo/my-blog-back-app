-- 0. Очистка таблиц в правильном порядке
DROP TABLE IF EXISTS comment;
DROP TABLE IF EXISTS post_tag;
DROP TABLE IF EXISTS post;
DROP TABLE IF EXISTS tag;

-- 1. Таблица постов
CREATE TABLE IF NOT EXISTS post (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(500) NOT NULL,
    text TEXT NOT NULL,
    likes_count INTEGER DEFAULT 0 NOT NULL,
    comments_count INTEGER DEFAULT 0 NOT NULL,
    image_url VARCHAR(500),
    image_name VARCHAR(255),
    image_size INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- 2. Таблица тегов
CREATE TABLE IF NOT EXISTS tag (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- 3. Таблица связи постов-тегов
CREATE TABLE IF NOT EXISTS post_tag (
    post_id BIGINT NOT NULL,
    tag_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY (post_id, tag_id),
    FOREIGN KEY (post_id) REFERENCES post(id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tag(id) ON DELETE CASCADE
);

-- 4. Таблица комментариев
CREATE TABLE IF NOT EXISTS comment (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id BIGINT NOT NULL,
    text TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (post_id) REFERENCES post(id) ON DELETE CASCADE
);

-- 5. Индексы
CREATE INDEX idx_post_created_at_desc ON post(created_at DESC);
CREATE INDEX idx_post_likes_count_desc ON post(likes_count DESC);
CREATE INDEX idx_post_title ON post(title);
CREATE INDEX idx_comment_post_id ON comment(post_id);
CREATE INDEX idx_comment_created_at_desc ON comment(created_at DESC);
CREATE INDEX idx_post_tag_post_id ON post_tag(post_id);
CREATE INDEX idx_post_tag_tag_id ON post_tag(tag_id);
CREATE INDEX idx_tag_name ON tag(name);
CREATE INDEX idx_post_comments_count ON post(comments_count);

-- 6. Комментарии к таблицам и полям
COMMENT ON TABLE post IS 'Таблица для хранения постов блога. Содержит основную информацию о посте включая заголовок, текст, метаданные и ссылку на изображение';
COMMENT ON COLUMN post.id IS 'Уникальный идентификатор поста, автоинкремент';
COMMENT ON COLUMN post.title IS 'Заголовок поста, обязательное поле, максимальная длина 500 символов';
COMMENT ON COLUMN post.text IS 'Текст поста в формате Markdown, обязательное поле';
COMMENT ON COLUMN post.likes_count IS 'Количество лайков поста, по умолчанию 0';
COMMENT ON COLUMN post.comments_count IS 'Количество комментариев к посту, по умолчанию 0';
COMMENT ON COLUMN post.image_url IS 'URL или путь к файлу изображения поста, опционально';
COMMENT ON COLUMN post.image_name IS 'Оригинальное имя файла изображения для отображения пользователю';
COMMENT ON COLUMN post.image_size IS 'Размер файла изображения в байтах, опционально';
COMMENT ON COLUMN post.created_at IS 'Дата и время создания поста, устанавливается автоматически';
COMMENT ON COLUMN post.updated_at IS 'Дата и время последнего обновления поста, обновляется автоматически';

COMMENT ON TABLE tag IS 'Таблица для хранения уникальных тегов, которые могут быть присвоены постам';
COMMENT ON COLUMN tag.id IS 'Уникальный идентификатор тега, автоинкремент';
COMMENT ON COLUMN tag.name IS 'Уникальное название тега, используется для группировки и поиска постов';
COMMENT ON COLUMN tag.created_at IS 'Дата и время создания тега, устанавливается автоматически';

COMMENT ON TABLE post_tag IS 'Таблица связи многие-ко-многим между постами и тегами. Один пост может иметь несколько тегов, один тег может принадлежать нескольким постам';
COMMENT ON COLUMN post_tag.post_id IS 'Внешний ключ на таблицу post, идентификатор поста';
COMMENT ON COLUMN post_tag.tag_id IS 'Внешний ключ на таблицу tag, идентификатор тега';
COMMENT ON COLUMN post_tag.created_at IS 'Дата и время создания связи между постом и тегом';

COMMENT ON TABLE comment IS 'Таблица для хранения комментариев к постам. Каждый комментарий принадлежит одному посту';
COMMENT ON COLUMN comment.id IS 'Уникальный идентификатор комментария, автоинкремент';
COMMENT ON COLUMN comment.post_id IS 'Внешний ключ на таблицу post, идентификатор поста к которому относится комментарий';
COMMENT ON COLUMN comment.text IS 'Текст комментария, обязательное поле';
COMMENT ON COLUMN comment.created_at IS 'Дата и время создания комментария, устанавливается автоматически';
COMMENT ON COLUMN comment.updated_at IS 'Дата и время последнего обновления комментария, обновляется при редактировании';
--------------------------------------------------
-- Очистка существующих данных
DELETE FROM comment;
DELETE FROM post_tag;
DELETE FROM post;
DELETE FROM tag;

-- Вставка тегов (с защитой от дубликатов)
INSERT INTO tag (name, created_at)
SELECT 'java', CURRENT_TIMESTAMP WHERE NOT EXISTS (SELECT 1 FROM tag WHERE name = 'java')
UNION ALL SELECT 'spring', CURRENT_TIMESTAMP WHERE NOT EXISTS (SELECT 1 FROM tag WHERE name = 'spring')
UNION ALL SELECT 'programming', CURRENT_TIMESTAMP WHERE NOT EXISTS (SELECT 1 FROM tag WHERE name = 'programming')
UNION ALL SELECT 'database', CURRENT_TIMESTAMP WHERE NOT EXISTS (SELECT 1 FROM tag WHERE name = 'database')
UNION ALL SELECT 'tutorial', CURRENT_TIMESTAMP WHERE NOT EXISTS (SELECT 1 FROM tag WHERE name = 'tutorial');

-- Вставка постов
INSERT INTO post (title, text, likes_count, comments_count, created_at, updated_at) VALUES
('Мой первый пост о Java', 'Изучаю Java и Spring Framework. Очень интересная технология!', 5, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Spring Boot преимущества', 'Spring Boot упрощает разработку приложений. Автоконфигурация - это круто!', 8, 3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Работа с базами данных', 'Рассказываю о основах работы с PostgreSQL и H2 в Spring приложениях. И еще добиваем число символов больше 128 и проверяем разные символы 1234567890!"№;%:?*()_/{}[]', 3, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Советы по программированию', 'Несколько полезных советов для начинающих разработчиков.', 2, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
('Без тегов пример', 'Этот пост создан без тегов для демонстрации.', 1, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- Связывание постов с тегами (только для первых 4 постов)
INSERT INTO post_tag (post_id, tag_id, created_at)
SELECT p.id, t.id, CURRENT_TIMESTAMP FROM post p, tag t
WHERE p.title = 'Мой первый пост о Java' AND t.name IN ('java', 'spring', 'programming');

INSERT INTO post_tag (post_id, tag_id, created_at)
SELECT p.id, t.id, CURRENT_TIMESTAMP FROM post p, tag t
WHERE p.title = 'Spring Boot преимущества' AND t.name IN ('java', 'spring');

INSERT INTO post_tag (post_id, tag_id, created_at)
SELECT p.id, t.id, CURRENT_TIMESTAMP FROM post p, tag t
WHERE p.title = 'Работа с базами данных' AND t.name IN ('java', 'database', 'tutorial');

INSERT INTO post_tag (post_id, tag_id, created_at)
SELECT p.id, t.id, CURRENT_TIMESTAMP FROM post p, tag t
WHERE p.title = 'Советы по программированию' AND t.name IN ('programming', 'tutorial');

-- Вставка комментариев (не для всех постов)
INSERT INTO comment (post_id, text, created_at, updated_at) VALUES
(1, 'Отличный первый пост! Удачи в изучении Java!', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
(1, 'Spring Framework действительно мощный инструмент.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
(2, 'Spring Boot экономит так много времени!', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
(2, 'Можно пример настройки автоконфигурации?', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
(2, 'Спасибо за полезную информацию!', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
(3, 'Хорошее объяснение основ работы с БД.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- Проверочные запросы (можно закомментировать в продакшене)
 SELECT 'Посты созданы:' as info;
 SELECT p.id, p.title, p.likes_count, p.comments_count,
        (SELECT COUNT(*) FROM post_tag pt WHERE pt.post_id = p.id) as tag_count,
        (SELECT COUNT(*) FROM comment c WHERE c.post_id = p.id) as comment_count
 FROM post p ORDER BY p.id;

 SELECT 'Теги:' as info;
 SELECT name FROM tag ORDER BY name;

 SELECT 'Связи постов с тегами:' as info;
 SELECT p.title, t.name
 FROM post p
 JOIN post_tag pt ON p.id = pt.post_id
 JOIN tag t ON pt.tag_id = t.id
 ORDER BY p.id, t.name;

 SELECT 'Комментарии:' as info;
 SELECT p.title, c.text
 FROM comment c
 JOIN post p ON c.post_id = p.id
 ORDER BY p.id, c.created_at;